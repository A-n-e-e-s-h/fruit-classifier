# -*- coding: utf-8 -*-
"""fruit class.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13Lu62RyxnwszBm4NnY4mjf0ujOyuerEV
"""

import numpy as np
import pandas as pd
from pathlib import Path
import os.path
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img,img_to_array
print(tf.__version__)
# 2.6.0
# Create a list with the filepaths for training and testing


from tensorflow.keras.applications import ResNet50
from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Model

from glob import glob

from google.colab import drive
drive.mount('/content/drive')

train_dir = '/content/drive/MyDrive/Fruits Classification/train/*'
train_filepaths = list(glob(train_dir+'/*'))
train_filepaths

test_dir = '/content/drive/MyDrive/Fruits Classification/test/*'
test_filepaths = list(glob(test_dir+'/*'))
test_filepaths

val_dir = '/content/drive/MyDrive/Fruits Classification/valid/*'
val_filepaths = list(glob(val_dir+'/*'))
val_filepaths

def image_processing(filepath):
    """ Create a DataFrame with the filepath and the labels of the pictures
    """

    labels = [str(filepath[i]).split("/")[-2] \
              for i in range(len(filepath))]

    filepath = pd.Series(filepath, name='Filepath').astype(str)
    labels = pd.Series(labels, name='Label')

    # Concatenate filepaths and labels
    df = pd.concat([filepath, labels], axis=1)

    # Shuffle the DataFrame and reset index
    df = df.sample(frac=1).reset_index(drop = True)

    return df

train_df = image_processing(train_filepaths)
test_df = image_processing(test_filepaths)
val_df = image_processing(val_filepaths)

train_df

print('-- Training set --\n')
print(f'Number of pictures: {train_df.shape[0]}\n')
print(f'Number of different labels: {len(train_df.Label.unique())}\n')
print(f'Labels: {train_df.Label.unique()}')

train_df.head(5)

# Create a DataFrame with one Label of each category
df_unique = train_df.copy().drop_duplicates(subset=["Label"]).reset_index()
df_unique

# Display some pictures of the dataset
fig, axes = plt.subplots(nrows=2, ncols=4, figsize=(10,3),
                        subplot_kw={'xticks': [], 'yticks': []})
for i, ax in enumerate(axes.flat):
    ax.imshow(plt.imread(df_unique.Filepath[i]))
    ax.set_title(df_unique.Label[i], fontsize = 12)
plt.tight_layout(pad=0.5)
plt.show()

train_generator = tf.keras.preprocessing.image.ImageDataGenerator(
    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input
)

test_generator = tf.keras.preprocessing.image.ImageDataGenerator(
    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input
)
train_images = train_generator.flow_from_dataframe(
    dataframe=train_df,
    x_col='Filepath',
    y_col='Label',
    target_size=(224, 224),
    color_mode='rgb',
    class_mode='categorical',
    batch_size=32,
    shuffle=True,
    seed=0,
    rotation_range=30,
    zoom_range=0.15,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.15,
    horizontal_flip=True,
    fill_mode="nearest"
)

val_images = train_generator.flow_from_dataframe(
    dataframe=val_df,
    x_col='Filepath',
    y_col='Label',
    target_size=(224, 224),
    color_mode='rgb',
    class_mode='categorical',
    batch_size=32,
    shuffle=True,
    seed=0,
    rotation_range=30,
    zoom_range=0.15,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.15,
    horizontal_flip=True,
    fill_mode="nearest"
)

test_images = test_generator.flow_from_dataframe(
    dataframe=test_df,
    x_col='Filepath',
    y_col='Label',
    target_size=(224, 224),
    color_mode='rgb',
    class_mode='categorical',
    batch_size=32,
    shuffle=False
)

"""mobielnet

"""

pretrained_model = tf.keras.applications.MobileNetV2(
    input_shape=(224, 224, 3),
    include_top=False,
    weights='imagenet',
    pooling='avg'
)
pretrained_model.trainable = False

inputs = pretrained_model.input

x = tf.keras.layers.Dense(128, activation='relu')(pretrained_model.output)
x = tf.keras.layers.Dense(128, activation='relu')(x)

outputs = tf.keras.layers.Dense(8, activation='softmax')(x)

model = tf.keras.Model(inputs=inputs, outputs=outputs)

model.compile(
    optimizer='adam',
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

history = model.fit(
    train_images,
    validation_data=val_images,
    batch_size = 32,
    epochs=5,
    callbacks=[
        tf.keras.callbacks.EarlyStopping(
            monitor='val_loss',
            patience=2,
            restore_best_weights=True
        )
    ]
)

# Predict the label of the test_images
pred = model.predict(test_images)
pred = np.argmax(pred,axis=1)
# # Map the label
labels = (train_images.class_indices)
labels = dict((v,k) for k,v in labels.items())
pred1 = [labels[k] for k in pred]
pred1

labels

def output(location):
    img=load_img(location,target_size=(224,224,3))
    img=img_to_array(img)
    img=img/255
    img=np.expand_dims(img,[0])
    answer=model.predict(img)
    y_class = answer.argmax(axis=-1)
    y = " ".join(str(x) for x in y_class)
    y = int(y)
    res = labels[y]
    return res

img = output('/content/drive/MyDrive/Fruits Classification/fruit/fruit/uploads/Grape_338.jpeg')
img

import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np

# Load the saved model
# model = tf.keras.models.load_model('/content/fruits8.keras')

model.save('fruits8.keras')  # NEW

import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import numpy as np

# Load the saved model
model = tf.keras.models.load_model('fruits8.keras')

def preprocess_image(image_path):
    # Load and preprocess a single image
    img = load_img(image_path, target_size=(224, 224))
    img = img_to_array(img)
    img = img / 255.0  # Normalize pixel values
    img = np.expand_dims(img, axis=0)  # Add batch dimension
    return img

# Define your class labels
labels = {0: 'Apple',
 1: 'Banana',
 2: 'Grape',
 3: 'Mango',
 4: 'Strawberry',
 5: 'chickoo fruit',
 6: 'kiwi fruit',
 7: 'orange fruit'}
# Path to your single test image
test_image_path = '/content/drive/MyDrive/Fruits Classification/test/Apple/Apple (1133).jpeg'
# test_image_path = '/content/drive/MyDrive/Fruits Classification/test/Banana/Banana (2044).jpeg'
# test_image_path = '/content/drive/MyDrive/Fruits Classification/test/Grape/Grape (1073).jpeg'
# test_image_path = '/content/drive/MyDrive/Fruits Classification/test/Mango/Mango (275).jpeg'
# test_image_path = '/content/drive/MyDrive/Fruits Classification/test/Strawberry/Strawberry (122).jpeg'
# test_image_path = '/content/drive/MyDrive/Fruits Classification/train/chickoo fruit/Image_1 - Copy (12).jpg'
test_image_path = '/content/drive/MyDrive/Fruits Classification/test/chickoo fruit/Image_14.jpg'
# test_image_path = '/content/drive/MyDrive/Fruits Classification/test/orange fruit/Image_10.jpg'


# Preprocess the single test image
processed_image = preprocess_image(test_image_path)

# Perform prediction on the preprocessed image using the loaded model
predictions = model.predict(processed_image)
predicted_class_index = np.argmax(predictions)

# Get the predicted class label
predicted_class = labels[predicted_class_index]

print("Predicted Class Label:", predicted_class)

import os
print(os.path.exists('fruits8.keras'))  # Should print: True

import os

# Get absolute path to the model file
keras_model_path = os.path.abspath('fruits8.keras')
print("Your .keras file is here:")
print(keras_model_path)

model.save(r'C:\Users\mhdah\Desktop\fruits8.keras')  # âœ… Easy to find

import os

path = os.path.abspath('fruits8.keras')
print(f"Checking full path: {path}")
print(f"Exists? {os.path.exists(path)}")
print(f"Is file? {os.path.isfile(path)}")

# List files in the same directory
print("\nFiles in folder:")
print(os.listdir(os.path.dirname(path)))

for f in os.listdir(os.path.dirname(path)):
    print(repr(f))  # Shows exact file names

model.save(r'C:\Users\mhdah\Desktop\fruit_model_test.keras')

with open(path, 'rb') as f:
    print("Successfully opened. File size:", len(f.read()), "bytes")

import os
print("Current working directory is:", os.getcwd())